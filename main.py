## @author shadowvvf
# Conda installation:
# conda create -n tgbot python=3.11.5
# conda activate tgbot
# pip install -r requirements.txt

from telegram import Update
from telegram.ext import Updater, CommandHandler, CallbackContext
from telegram import InlineKeyboardMarkup, InlineKeyboardButton
import requests

# –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ç–æ–∫–µ–Ω
TELEGRAM_BOT_TOKEN = 'token'
# –º–æ–∂–µ—à—å –Ω–µ –ø—Ä–æ–±–æ–≤–∞—Ç—å —é–∑–∞—Ç—å —Ç–æ–∫–µ–Ω –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –≤ –ø—Ä–æ—à–ª–æ–º –∫–æ–º–º–∏—Ç–µ, –≤—Å—ë —Ä–∞–≤–Ω–æ –æ–Ω –Ω–µ —Ä–∞–±–æ—á–∏–π :)

def start(update: Update, context: CallbackContext):
    update.message.reply_text('–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ GitHub –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–º.')

def get_repo_info(update: Update, context: CallbackContext):
    args = context.args
    if len(args) < 2:
        update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.')
        return

    username, repo_name = args[0], args[1]
    repo_url = f'https://api.github.com/repos/{username}/{repo_name}'
    response = requests.get(repo_url)
    if response.status_code == 200:
        repo_data = response.json()
        repo_info = f"""
üè∑–ù–∞–∑–≤–∞–Ω–∏–µ: {repo_data.get('name', '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ')}
üë§–í–ª–∞–¥–µ–ª–µ—Ü: {repo_data.get('owner', {}).get('login', '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ')}
üìÇ–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ä–∫–æ–≤: {repo_data.get('forks_count', '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ')}
‚≠êÔ∏è–ó–≤—ë–∑–¥—ã: {repo_data.get('stargazers_count', '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ')}
üëÄ–ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {repo_data.get('watchers_count', '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ')}
üîóURL: {repo_data.get('html_url', '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ')}
        """
        update.message.reply_text(repo_info)

        # –ß–∏—Å—Ç–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏ —Ñ—É–Ω–∫—Ü–∏—è –µ—Å—Ç—å, –∏ –æ–Ω–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è, –Ω–æ –æ–Ω–∞ –±—ã–ª–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –ø–æ—Å–∫–æ–ª—å–∫—É –Ω–∞ github —Å—Ç–æ–∏—Ç rate limit
        # –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤, –∞ –∏–º–µ–Ω–Ω–æ –∏—Ö –≤—Å–µ–≥–æ 60. –ò –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è –æ–Ω–∏ –ø—Ä–∏–º–µ—Ä–Ω–æ 30 –º–∏–Ω—É—Ç. –¢–∞–∫ —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –±—ã–ª–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞
        # –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —ç—Ç–æ–≥–æ —Å–∞–º–æ–≥–æ rate limit

        """contents_url = repo_data.get('contents_url', '').replace('{+path}', '')
        contents_response = requests.get(contents_url)
        if contents_response.status_code == 200:
            contents_data = contents_response.json()
            file_hierarchy = format_file_hierarchy(contents_data)
            update.message.reply_text(file_hierarchy)
        else:
            update.message.reply_text('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–ª—É—á–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è.')"""

    else:
        update.message.reply_text('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ GitHub.')

"""
def format_file_hierarchy(contents_data, path_prefix=''):
    hierarchy = ''
    for item in contents_data:
        if item['type'] == 'file':
            hierarchy += f"üìÑ{path_prefix}{item['name']}\n"
        elif item['type'] == 'dir':
            hierarchy += f"üìÇ{path_prefix}{item['name']}\n"
            # Recursively get the contents of the directory
            dir_contents_url = item['url']
            dir_contents_response = requests.get(dir_contents_url)
            if dir_contents_response.status_code == 200:
                dir_contents_data = dir_contents_response.json()
                hierarchy += format_file_hierarchy(dir_contents_data, f"{path_prefix}{item['name']}/")
    return hierarchy
"""

def get_user_info(update: Update, context: CallbackContext):
    username = ' '.join(context.args)
    if not username:
        update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è GitHub –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.')
        return

    user_url = f'https://api.github.com/users/{username}'
    response = requests.get(user_url)
    if response.status_code == 200:
        user_data = response.json()
        stars_url = user_data.get('starred_url', '').split('{')[0]  # –£–±—Ä–∞—Ç—å {/owner}{/repo}
        stars_response = requests.get(stars_url)
        stars_count = len(stars_response.json()) if stars_response.ok else '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ'
        
        user_info = f"""
üè∑–ò–º—è: {user_data.get('name', '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ')}
üë§–ü—Ä–æ—Ñ–∏–ª—å: {user_data.get('html_url', '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ')}
üìÇ–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤: {user_data.get('public_repos', '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ')}
üë•–ü–æ–¥–ø–∏—Å—á–∏–∫–∏: {user_data.get('followers', '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ')}
üåü–ó–≤—ë–∑–¥: {stars_count}
        """
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("–°–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏", url=f'https://github.com/{username}?tab=repositories')]
        ])
        
        update.message.reply_text(user_info, reply_markup=keyboard)
    else:
        update.message.reply_text('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ GitHub.')

def main():
    updater = Updater(TELEGRAM_BOT_TOKEN)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("getuserinfo", get_user_info, pass_args=True))
    dp.add_handler(CommandHandler("getrepoinfo", get_repo_info, pass_args=True))

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()